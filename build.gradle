buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies { classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT' }
}

plugins { id 'net.minecraftforge.gradle' version '5.1.+' }

apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = "$mod_author.$mod_id"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: minecraft_version
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "$mod_id" { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "$mod_id" { source sourceSets.main } }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "$mod_id" { source sourceSets.main } }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods { "$mod_id" { source sourceSets.main } }
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven {
        url = "https://maven.saps.dev/minecraft"
        content { includeGroup "dev.latvian.mods" }
    }
    maven {
        url = "https://maven.architectury.dev"
        content { includeGroup "dev.architectury" }
    }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

    implementation fg.deobf("dev.architectury:architectury-forge:$architectury_version")

    implementation fg.deobf("dev.latvian.mods:kubejs-forge:$kubejs_version")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:$rhino_version")

    implementation fg.deobf("curse.maven:jumbofurnace-390880:$jumbo_file")

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:11.5.0.297")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:11.5.0.297")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : mod_author_name,
                "Specification-Version"   : mod_version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_author_name,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach { options.encoding = 'UTF-8' }
